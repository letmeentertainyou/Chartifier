At this point I'm mostly just working on the C code and I will probably branch that off into
it's own project soon. I'm gonna try to implement a few two dimensional array methods in C and that
will get it's own repo soon. I like using Python so I'm going to continuing focusing on writing C that 
I can run in Python. I know there are some other options with sys calls directly from python and Cython as
well. I don't really know the performance differences between the three but I like writing C so I'm going
to focus on C Python for now. I really like how cleanly integrated with Python it is.

Speaking of Python for this version I have been using Python3.8 because that's the official version on my system and
it has setuptools installed. I have so many other versions of python on my computer but they don't have their
own pip commands. I can create environments and install libraries that way. But for the fast and lazy approach of 
actually installing packages globally my python situation is a bit busted. So I will probably just setup a python
environment with it's own dockerfile in the next project. Maybe I'll even try building a C python module inside of 
docker that would be wild! Also I can use the latest python which I think is 3.12 and learn it's features too.


*** C PYTHON ***
    *Fix memory issues in C code for higher input size performance.

    *Write a much more complex version of pybuild.sh with benchmarking and O flag options.

    *Benchmark C module it against original Python code.

*** PYTHON ***
    *use machine learning to generate random chord progressions based on training data.

*** JAVASCRIPT ***
    *start creating chord weighting algos.
    *fix dropdowns so that key is only reset when the selected mode does't have that key.
        This should be a simple logic tweak in maybe two places in one file. 

*** HTML/CSS ***
    *make font sizes dynamic.
    *clean up webpage


changelog:
v0.2.0
Added chord weighing algorithms in python and js.
Added deepCopy and xfill to js/tools.js

v0.2.5
Added first draft string padding, the spacing is still awkward and I may need a custom font for this. 
Added ♯ and ♭ characters to the document.
Changed the strum pattern algorithm to be more accurate and switched js to use pre-rendered 
data this doesn't really effect the page load time but it did remove a lot of math from
Chartifier.html, and allows me to render much larger groups of 8th notes ahead of time.

v0.2.6
Cleaned up the python code so that main.py matches main.js again.

v0.3.0
O(N! * M) -> O(Nᴹ)
Wrote a brand new algorithm for calculating strum patterns which is basically infinitely faster than 
using permutations. What used to take 70mins to uncountable time now takes under a second. While this 
change doesn't effect the front end, I was really motivated to solve the problem. I could easily use 
this algorithm in the front end again, and generate truly custom rhythmic options.

v0.3.1
Updated readme,
Improved rhythm_permutations algorithm further.
OLD for size = 30
real    0m56.847s
user    0m53.768s
sys     0m3.073s

NEW for size = 30
real    0m1.507s
user    0m1.459s
sys     0m0.049s

35X time improvement.

v0.3.2
Updated LICENSE to MIT.
Rewrote README
Cleaned up python/rhythm.py a bit. 

v0.3.5
Finally added detailed doc strings on every python/js file.
Updated README again.
Made a src dir for the browser relevant code.

v0.3.6
Another algo speed up for rhythm.py. If the size is even, and sum_slice == size -1,
and two is the smallest int in start then we can continue here.

v0.3.7
Converted the 0.3.6 algo to Go!
Wrote a new algo that should be faster

v0.4.0
Added docs/benchmark_data.txt to track algorithm changes and the resulting times because
that data was clogging up the changelog. I also added a algorithm_changes directory to root
that tracks the actual code described in benchmark_data.txt. I wanted to archive the failed
algorithms too so that I don't retread old ground.
I did end up with a working version of the v0.3.7 algorithm called v0.3.7d which is now implemented
in go/rhythm.go and python/rhythm.py

v0.4.1
Fixed a major whitespace bug, compare screenshots for v0.3.6 with v0.4.1
to see the difference.

v0.4.5
Added some new CSS, changed how writing to the document works, added idWrite()
function to update individual page ids, added some ids into the html too. I will
add screenshots of these changes when things are more polished. 

v0.4.6
Cleaned up the HTML/CSS a lot.

v0.4.8
Added a pre-commit script that bundles src dir into a dist dir, added scripts dir, 
added dist dir. Wrote my own simple bundler because webpack was a headache and this
project is very small.

Also rewrote rhythm.py into js and removed all of the pre-rendered strum patterns from the
project. The algorithm is fast enough to render size=16 in well under 100 milliseconds.

v0.7.5
Added drop down menus to select mode/key/count. Updated README to explain their use,
and added some v0.7.5 screenshots. Added support for harmonic/melodic minor keys to the 
front end (it was in the first published version of Chartifier.) I could add support for 
the modes of the harmonic/melodic minor scales but I don't know their names and it would 
make the modes dropdown menu have 21 items which is a bit busy.

v0.8.0
Rewrote rhythm.py in C. The first draft in C has some memory issues that Python didn't have, I am
working on a second revision that uses much less memory via bit packing.

v0.8.1
Found what I think was a pretty big memory leak in int_array.c, weirdly I found it because I was
messing around with the new bit packed version of the library and found that my old code from Sets.c 
was flawed. Before the fix rhythm_permutations(47) was getting killed and fulling filling up my ram,
now it does take almost all 16GB of ram that I have but it isn't being killed. So I do think I patched
a pretty major leak. I'm glad I found it now because the improvements of the bit packed one will look
better without a major leak.

v0.8.5
A second version of the C code that bit packs 16 values into the same amount of memory as a single int
has been written. I actually wrote and rewrote the code several times fixing many bugs and performance
wastes along the way. The final version of the library is very compact, I tried to remove every single
unneeded assignment because these functions are ultimately run millions and millions of times. There
is a document called times.txt in the C code directory that goes into a little detail about the time
differences between the different versions. I expected some serious time losses because of all this
bit packing and the first version was very bad but now the loss is about 10 seconds at size=45. Which
is not bad because the old C code can't run much bigger than that do to ram usage. So I'd call this
a pretty big win.

v0.8.6
I wrote one more quick version of the Array library that does use unsigned chars instead of ints but it
only packs one value into each. This version is just as fast as the original int version but is also
4x memory efficient. It's a comprise on the 16x memory reduction but it feels like a fair place to end.
I will begin working on the C module next but I might package up the arrays and add the better code to
my Sets repository that the C code originally came from because there were many many memory leaks in the
original code.

v0.9.0
Started reusing the arrays that I allocated with a clear_array function. This removed a significant amount
of allocation and free calls from the stack. I also made a few other speed improvements and took a little
while to unify the code from the three different modules. I'm probably going to put two of the modules into
a relegated state soon so that I stop maintaining three copies of the array code.

I also combined all my different compile/debug/benchmark scripts into one build script that also supports
different GCC optimization flags.

v0.9.7
I built the first version of the Python module, it has it's own build script called pybuild.sh, and it can be
built with any of the three array.c libraries I wrote. There is still some work to be done on memory management
and error handling though.

ADDENDUM: I accidentally wiped out every update after v0.7.4 from git but you can read about them in this changelog.

v0.9.8
Updated pybuild.sh to auto generate the required setup.py file so that I don't need three copies of it. I can tell
that if I start adding flags for benchmarking and optimizing then that script will get very messy. I'm not sure of the
right path forward but I'm guessing there are other build tools for C Python so perhaps the best move forward is to learn
more about them. 

I also tried to clean up the names of the files in c/ it's a little confusing all over the place because
I put the main function of the code in a separate file from the actually python code. I was treating it a bit like how 
you separate gui code from logic and doing it that way made sense because I wrote the C code before involving Python.h.
I will continue trying to clean the names up wherever possible.

v0.9.9
Retooled pybuild so that it doesn't include the full text of setup.py and rhythm_utils.h. Now there is a directory called
templates with almost complete versions of the files and the pybuild script uses sed to create the correct versions of those
files in the correct places. It's still a bit messy but I think it always will be with this kind of dynamic library inclusion.