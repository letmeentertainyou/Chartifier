*** JS ***
    *rewrite rhythm.py in JS  DONE

*** HTML ***
    *fix font size.           DONE
    *weighted random chords   DONE
    *pad chord strings.       DONE

    *new chords button        DONE
    *figure out how to make the top of the page look nicer, and center the button. DONE
    *dropdown menus for key/rhythm


*** Toolchain ***
    *add js compiler like WebPack, and add /dist dir for the packed code. DONE


changelog:
v0.2.0
Added chord weighing algorithms in python and js.
Added deepCopy and xfill to js/tools.js

v0.2.5
Added first draft string padding, the spacing is still awkward and I may need a custom font for this. 
Added ♯ and ♭ characters to the document.
Changed the strum pattern algorithm to be more accurate and switched js to use pre-rendered 
data this doesn't really effect the page load time but it did remove a lot of math from
Chartifier.html, and allows me to render much larger groups of 8th notes ahead of time.

v0.2.6
Cleaned up the python code so that main.py matches main.js again.

v0.3.0
O(N! * M) -> O(Nᴹ)
Wrote a brand new algorithm for calculating strum patterns which is basically infinitely faster than 
using permutations. What used to take 70mins to uncountable time now takes under a second. While this 
change doesn't effect the front end, I was really motivated to solve the problem. I could easily use 
this algorithm in the front end again, and generate truly custom rhythmic options.

v0.3.1
Updated readme,
Improved rhythm_permutations algorithm further.
OLD for size = 30
real    0m56.847s
user    0m53.768s
sys     0m3.073s

NEW for size = 30
real    0m1.507s
user    0m1.459s
sys     0m0.049s

35X time improvement.

v0.3.2
Updated LICENSE to MIT.
Rewrote README
Cleaned up python/rhythm.py a bit. 

v0.3.5
Finally added detailed doc strings on every python/js file.
Updated README again.
Made a src dir for the browser relevant code.

v0.3.6
Another algo speed up for rhythm.py. If the size is even, and sum_slice == size -1,
and two is the smallest int in start then we can continue here.

v0.3.7
Converted the 0.3.6 algo to Go!
Wrote a new algo that should be faster

v0.4.0
Added docs/benchmark_data.txt to track algorithm changes and the resulting times because
that data was clogging up the changelog. I also added a algorithm_changes directory to root
that tracks the actual code described in benchmark_data.txt. I wanted to archive the failed
algorithms too so that I don't retread old ground.
I did end up with a working version of the v0.3.7 algorithm called v0.3.7d which is now implemented
in go/rhythm.go and python/rhythm.py

v0.4.1
Fixed a major whitespace bug, compare screenshots for v0.3.6 with v0.4.1
to see the difference.

v0.4.5
Added some new CSS, changed how writing to the document works, added idWrite()
function to update individual page ids, added some ids into the html too. I will
add screenshots of these changes when things are more polished. 

v0.4.6
Cleaned up the HTML/CSS a lot.

v0.4.8
Added a pre-commit script that bundles src dir into a dist dir, added scripts dir, 
added dist dir. Wrote my own simple bundler because webpack was a headache and this
project is very small.

Also rewrote rhythm.py into js and removed all of the pre-rendered strum patterns from the
project. The algorithm is fast enough to render size=16 in well under 100 milliseconds.